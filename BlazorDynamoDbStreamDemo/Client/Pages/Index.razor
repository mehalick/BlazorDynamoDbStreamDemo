@page "/"
@inject BookService.BookServiceClient BookServiceClient

<PageTitle>Index</PageTitle>

<div class="row mb-3">
	<div class="col-md">
		<label for="pageSize" class="form-label fw-semibold small">Page Size</label>
		<input id="pageSize" @bind="_pageSize" type="number" class="form-control form-control-sm" />
	</div>
	<div class="col-md">
		<label for="renderCount" class="form-label fw-semibold small">Render Count</label>
		<input id="renderCount" @bind="_renderCount" type="number" class="form-control form-control-sm" />
	</div>
	<div class="col-md">
		<label for="taskDelay" class="form-label fw-semibold small">Task Delay</label>
		<input id="taskDelay" @bind="_taskDelay" type="number" class="form-control form-control-sm" />
	</div>
</div>

<button type="button" class="btn btn-primary mb-3" @onclick="FetchData">Fetch Data</button>

@if (_isFetching)
{
	<p>Fetched <strong>@_data.Count</strong> items in <strong>@_timeToFirstItem</strong> ms - <strong>@_timeToLastItem</strong> ms</p>

	<table class="table table-bordered table-striped">
		<colgroup>
			<col style="width: 10%;" />
			<col style="width: 10%;" />
			<col style="width: 80%;" />
		</colgroup>
		<thead>
			<tr>
				<th>Pk</th>
				<th>Sk</th>
				<th>Title</th>
			</tr>
		</thead>
		<tbody>
			<Virtualize Items="@_data">
				<tr>
					<td>@context.Pk</td>
					<td>@context.Sk</td>
					<td>@context.Title</td>
				</tr>
			</Virtualize>
		</tbody>
	</table>
}

@code {

	private readonly List<GetBooksReply> _data = new();
	private long _timeToFirstItem;
	private long _timeToLastItem;
	private bool _isFetching;

	private int _pageSize = 1000;
	private int _renderCount = 500;
	private int _taskDelay = 10;

	protected async Task FetchData()
	{
		_data.Clear();
		_timeToFirstItem = 0;
		_timeToLastItem = 0;
		_isFetching = true;

		var sw = Stopwatch.StartNew();

		var response = BookServiceClient.GetBooks(new GetBooksRequest
		{
			PageSize = _pageSize
		});

		var i = 0;

		await foreach (var item in response.ResponseStream.ReadAllAsync())
		{
			if (_timeToFirstItem == 0)
			{
				_timeToFirstItem = sw.ElapsedMilliseconds;
			}

			_timeToLastItem = sw.ElapsedMilliseconds;

			_data.Add(item);

			if (++i % _renderCount != 0)
			{
				continue;
			}
			
			StateHasChanged();

			if (_taskDelay > 0)
			{
				await Task.Delay(_taskDelay);
			}
		}
	}
}
